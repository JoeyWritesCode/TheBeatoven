/*
 * generated by Xtext 2.25.0
 */
grammar InternalBeatoven;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package uk.ac.kcl.beatoven.beatoven.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.ac.kcl.beatoven.beatoven.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import uk.ac.kcl.beatoven.beatoven.services.BeatovenGrammarAccess;

}
@parser::members {
	private BeatovenGrammarAccess grammarAccess;

	public void setGrammarAccess(BeatovenGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSection
entryRuleSection
:
{ before(grammarAccess.getSectionRule()); }
	 ruleSection
{ after(grammarAccess.getSectionRule()); } 
	 EOF 
;

// Rule Section
ruleSection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSectionAccess().getGroup()); }
		(rule__Section__Group__0)
		{ after(grammarAccess.getSectionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getAlternatives()); }
		(rule__Command__Alternatives)
		{ after(grammarAccess.getCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActionCommand
entryRuleActionCommand
:
{ before(grammarAccess.getActionCommandRule()); }
	 ruleActionCommand
{ after(grammarAccess.getActionCommandRule()); } 
	 EOF 
;

// Rule ActionCommand
ruleActionCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionCommandAccess().getGroup()); }
		(rule__ActionCommand__Group__0)
		{ after(grammarAccess.getActionCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoopCommand
entryRuleLoopCommand
:
{ before(grammarAccess.getLoopCommandRule()); }
	 ruleLoopCommand
{ after(grammarAccess.getLoopCommandRule()); } 
	 EOF 
;

// Rule LoopCommand
ruleLoopCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoopCommandAccess().getGroup()); }
		(rule__LoopCommand__Group__0)
		{ after(grammarAccess.getLoopCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAction
entryRuleAction
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionAccess().getPlayKeyword()); }
		'play'
		{ after(grammarAccess.getActionAccess().getPlayKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSoundLiteral
entryRuleSoundLiteral
:
{ before(grammarAccess.getSoundLiteralRule()); }
	 ruleSoundLiteral
{ after(grammarAccess.getSoundLiteralRule()); } 
	 EOF 
;

// Rule SoundLiteral
ruleSoundLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSoundLiteralAccess().getAlternatives()); }
		(rule__SoundLiteral__Alternatives)
		{ after(grammarAccess.getSoundLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDrumSample
entryRuleDrumSample
:
{ before(grammarAccess.getDrumSampleRule()); }
	 ruleDrumSample
{ after(grammarAccess.getDrumSampleRule()); } 
	 EOF 
;

// Rule DrumSample
ruleDrumSample 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDrumSampleAccess().getGroup()); }
		(rule__DrumSample__Group__0)
		{ after(grammarAccess.getDrumSampleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMelody
entryRuleMelody
:
{ before(grammarAccess.getMelodyRule()); }
	 ruleMelody
{ after(grammarAccess.getMelodyRule()); } 
	 EOF 
;

// Rule Melody
ruleMelody 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMelodyAccess().getGroup()); }
		(rule__Melody__Group__0)
		{ after(grammarAccess.getMelodyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSample
entryRuleSample
:
{ before(grammarAccess.getSampleRule()); }
	 ruleSample
{ after(grammarAccess.getSampleRule()); } 
	 EOF 
;

// Rule Sample
ruleSample 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSampleAccess().getAlternatives()); }
		(rule__Sample__Alternatives)
		{ after(grammarAccess.getSampleAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePattern
entryRulePattern
:
{ before(grammarAccess.getPatternRule()); }
	 rulePattern
{ after(grammarAccess.getPatternRule()); } 
	 EOF 
;

// Rule Pattern
rulePattern 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternAccess().getAlternatives()); }
		(rule__Pattern__Alternatives)
		{ after(grammarAccess.getPatternAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDuration
entryRuleDuration
:
{ before(grammarAccess.getDurationRule()); }
	 ruleDuration
{ after(grammarAccess.getDurationRule()); } 
	 EOF 
;

// Rule Duration
ruleDuration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDurationAccess().getGroup()); }
		(rule__Duration__Group__0)
		{ after(grammarAccess.getDurationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFrequency
entryRuleFrequency
:
{ before(grammarAccess.getFrequencyRule()); }
	 ruleFrequency
{ after(grammarAccess.getFrequencyRule()); } 
	 EOF 
;

// Rule Frequency
ruleFrequency 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFrequencyAccess().getAlternatives()); }
		(rule__Frequency__Alternatives)
		{ after(grammarAccess.getFrequencyAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleScale
entryRuleScale
:
{ before(grammarAccess.getScaleRule()); }
	 ruleScale
{ after(grammarAccess.getScaleRule()); } 
	 EOF 
;

// Rule Scale
ruleScale 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getScaleAccess().getAlternatives()); }
		(rule__Scale__Alternatives)
		{ after(grammarAccess.getScaleAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVAL
entryRuleVAL
:
{ before(grammarAccess.getVALRule()); }
	 ruleVAL
{ after(grammarAccess.getVALRule()); } 
	 EOF 
;

// Rule VAL
ruleVAL 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVALAccess().getAlternatives()); }
		(rule__VAL__Alternatives)
		{ after(grammarAccess.getVALAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleREAL
entryRuleREAL
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getREALRule()); }
	 ruleREAL
{ after(grammarAccess.getREALRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule REAL
ruleREAL 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getREALAccess().getGroup()); }
		(rule__REAL__Group__0)
		{ after(grammarAccess.getREALAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

rule__Command__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getLoopCommandParserRuleCall_0()); }
		ruleLoopCommand
		{ after(grammarAccess.getCommandAccess().getLoopCommandParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getActionCommandParserRuleCall_1()); }
		ruleActionCommand
		{ after(grammarAccess.getCommandAccess().getActionCommandParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoundLiteral__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSoundLiteralAccess().getDrumSampleParserRuleCall_0()); }
		ruleDrumSample
		{ after(grammarAccess.getSoundLiteralAccess().getDrumSampleParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSoundLiteralAccess().getMelodyParserRuleCall_1()); }
		ruleMelody
		{ after(grammarAccess.getSoundLiteralAccess().getMelodyParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sample__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSampleAccess().getHihatKeyword_0()); }
		'hihat'
		{ after(grammarAccess.getSampleAccess().getHihatKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getSampleAccess().getKickKeyword_1()); }
		'kick'
		{ after(grammarAccess.getSampleAccess().getKickKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getSampleAccess().getSnareKeyword_2()); }
		'snare'
		{ after(grammarAccess.getSampleAccess().getSnareKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getChordsKeyword_0()); }
		'chords'
		{ after(grammarAccess.getPatternAccess().getChordsKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getPatternAccess().getLeadKeyword_1()); }
		'lead'
		{ after(grammarAccess.getPatternAccess().getLeadKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getPatternAccess().getBassKeyword_2()); }
		'bass'
		{ after(grammarAccess.getPatternAccess().getBassKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Frequency__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFrequencyAccess().getGroup_0()); }
		(rule__Frequency__Group_0__0)
		{ after(grammarAccess.getFrequencyAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getFrequencyAccess().getGroup_1()); }
		(rule__Frequency__Group_1__0)
		{ after(grammarAccess.getFrequencyAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scale__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScaleAccess().getMajorKeyword_0()); }
		'major'
		{ after(grammarAccess.getScaleAccess().getMajorKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getScaleAccess().getMinorKeyword_1()); }
		'minor'
		{ after(grammarAccess.getScaleAccess().getMinorKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VAL__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVALAccess().getINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getVALAccess().getINTTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getVALAccess().getREALParserRuleCall_1()); }
		ruleREAL
		{ after(grammarAccess.getVALAccess().getREALParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getKeyAssignment_0()); }
	(rule__Model__KeyAssignment_0)
	{ after(grammarAccess.getModelAccess().getKeyAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getScaleAssignment_1()); }
	(rule__Model__ScaleAssignment_1)
	{ after(grammarAccess.getModelAccess().getScaleAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getBpmAssignment_2()); }
	(rule__Model__BpmAssignment_2)
	{ after(grammarAccess.getModelAccess().getBpmAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getIsRandomisedAssignment_3()); }
	(rule__Model__IsRandomisedAssignment_3)?
	{ after(grammarAccess.getModelAccess().getIsRandomisedAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__4__Impl
	rule__Model__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getModelAccess().getSectionsAssignment_4()); }
		(rule__Model__SectionsAssignment_4)
		{ after(grammarAccess.getModelAccess().getSectionsAssignment_4()); }
	)
	(
		{ before(grammarAccess.getModelAccess().getSectionsAssignment_4()); }
		(rule__Model__SectionsAssignment_4)*
		{ after(grammarAccess.getModelAccess().getSectionsAssignment_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getModelAccess().getCallsAssignment_5()); }
		(rule__Model__CallsAssignment_5)
		{ after(grammarAccess.getModelAccess().getCallsAssignment_5()); }
	)
	(
		{ before(grammarAccess.getModelAccess().getCallsAssignment_5()); }
		(rule__Model__CallsAssignment_5)*
		{ after(grammarAccess.getModelAccess().getCallsAssignment_5()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Section__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Section__Group__0__Impl
	rule__Section__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSectionAccess().getNameAssignment_0()); }
	(rule__Section__NameAssignment_0)
	{ after(grammarAccess.getSectionAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Section__Group__1__Impl
	rule__Section__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSectionAccess().getDurationAssignment_1()); }
	(rule__Section__DurationAssignment_1)
	{ after(grammarAccess.getSectionAccess().getDurationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Section__Group__2__Impl
	rule__Section__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSectionAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getSectionAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Section__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getSectionAccess().getCommandsAssignment_3()); }
		(rule__Section__CommandsAssignment_3)
		{ after(grammarAccess.getSectionAccess().getCommandsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getSectionAccess().getCommandsAssignment_3()); }
		(rule__Section__CommandsAssignment_3)*
		{ after(grammarAccess.getSectionAccess().getCommandsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ActionCommand__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionCommand__Group__0__Impl
	rule__ActionCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionCommand__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionCommandAccess().getActionAssignment_0()); }
	(rule__ActionCommand__ActionAssignment_0)
	{ after(grammarAccess.getActionCommandAccess().getActionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionCommand__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionCommand__Group__1__Impl
	rule__ActionCommand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionCommand__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionCommandAccess().getSoundAssignment_1()); }
	(rule__ActionCommand__SoundAssignment_1)
	{ after(grammarAccess.getActionCommandAccess().getSoundAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionCommand__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionCommand__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionCommand__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionCommandAccess().getFrequencyAssignment_2()); }
	(rule__ActionCommand__FrequencyAssignment_2)
	{ after(grammarAccess.getActionCommandAccess().getFrequencyAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LoopCommand__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopCommand__Group__0__Impl
	rule__LoopCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCommand__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopCommandAccess().getLoopKeyword_0()); }
	'loop'
	{ after(grammarAccess.getLoopCommandAccess().getLoopKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCommand__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopCommand__Group__1__Impl
	rule__LoopCommand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCommand__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopCommandAccess().getDurationAssignment_1()); }
	(rule__LoopCommand__DurationAssignment_1)
	{ after(grammarAccess.getLoopCommandAccess().getDurationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCommand__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopCommand__Group__2__Impl
	rule__LoopCommand__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCommand__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopCommandAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getLoopCommandAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCommand__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopCommand__Group__3__Impl
	rule__LoopCommand__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCommand__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getLoopCommandAccess().getCommandsAssignment_3()); }
		(rule__LoopCommand__CommandsAssignment_3)
		{ after(grammarAccess.getLoopCommandAccess().getCommandsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getLoopCommandAccess().getCommandsAssignment_3()); }
		(rule__LoopCommand__CommandsAssignment_3)*
		{ after(grammarAccess.getLoopCommandAccess().getCommandsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCommand__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopCommand__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCommand__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopCommandAccess().getGroup_4()); }
	(rule__LoopCommand__Group_4__0)?
	{ after(grammarAccess.getLoopCommandAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LoopCommand__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopCommand__Group_4__0__Impl
	rule__LoopCommand__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCommand__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopCommandAccess().getContinueAssignment_4_0()); }
	(rule__LoopCommand__ContinueAssignment_4_0)
	{ after(grammarAccess.getLoopCommandAccess().getContinueAssignment_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCommand__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopCommand__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCommand__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopCommandAccess().getNextAssignment_4_1()); }
	(rule__LoopCommand__NextAssignment_4_1)
	{ after(grammarAccess.getLoopCommandAccess().getNextAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DrumSample__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DrumSample__Group__0__Impl
	rule__DrumSample__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DrumSample__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDrumSampleAccess().getStyleAssignment_0()); }
	(rule__DrumSample__StyleAssignment_0)
	{ after(grammarAccess.getDrumSampleAccess().getStyleAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DrumSample__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DrumSample__Group__1__Impl
	rule__DrumSample__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DrumSample__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDrumSampleAccess().getSampleAssignment_1()); }
	(rule__DrumSample__SampleAssignment_1)
	{ after(grammarAccess.getDrumSampleAccess().getSampleAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DrumSample__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DrumSample__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DrumSample__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDrumSampleAccess().getCounterAssignment_2()); }
	(rule__DrumSample__CounterAssignment_2)
	{ after(grammarAccess.getDrumSampleAccess().getCounterAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Melody__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Melody__Group__0__Impl
	rule__Melody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Melody__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMelodyAccess().getAmountOfNotesAssignment_0()); }
	(rule__Melody__AmountOfNotesAssignment_0)
	{ after(grammarAccess.getMelodyAccess().getAmountOfNotesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Melody__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Melody__Group__1__Impl
	rule__Melody__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Melody__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMelodyAccess().getIsMelodyAssignment_1()); }
	(rule__Melody__IsMelodyAssignment_1)
	{ after(grammarAccess.getMelodyAccess().getIsMelodyAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Melody__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Melody__Group__2__Impl
	rule__Melody__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Melody__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMelodyAccess().getStyleAssignment_2()); }
	(rule__Melody__StyleAssignment_2)
	{ after(grammarAccess.getMelodyAccess().getStyleAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Melody__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Melody__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Melody__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMelodyAccess().getPatternAssignment_3()); }
	(rule__Melody__PatternAssignment_3)
	{ after(grammarAccess.getMelodyAccess().getPatternAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Duration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Duration__Group__0__Impl
	rule__Duration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Duration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDurationAccess().getForKeyword_0()); }
	'for'
	{ after(grammarAccess.getDurationAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Duration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Duration__Group__1__Impl
	rule__Duration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Duration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDurationAccess().getAmountOfBarsAssignment_1()); }
	(rule__Duration__AmountOfBarsAssignment_1)
	{ after(grammarAccess.getDurationAccess().getAmountOfBarsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Duration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Duration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Duration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDurationAccess().getBarsKeyword_2()); }
	'bars'
	{ after(grammarAccess.getDurationAccess().getBarsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Frequency__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Frequency__Group_0__0__Impl
	rule__Frequency__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Frequency__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFrequencyAccess().getEachAssignment_0_0()); }
	(rule__Frequency__EachAssignment_0_0)
	{ after(grammarAccess.getFrequencyAccess().getEachAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Frequency__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Frequency__Group_0__1__Impl
	rule__Frequency__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Frequency__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFrequencyAccess().getAmountOfBeatsAssignment_0_1()); }
	(rule__Frequency__AmountOfBeatsAssignment_0_1)
	{ after(grammarAccess.getFrequencyAccess().getAmountOfBeatsAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Frequency__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Frequency__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Frequency__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFrequencyAccess().getBeatKeyword_0_2()); }
	'beat'
	{ after(grammarAccess.getFrequencyAccess().getBeatKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Frequency__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Frequency__Group_1__0__Impl
	rule__Frequency__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Frequency__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFrequencyAccess().getEveryAssignment_1_0()); }
	(rule__Frequency__EveryAssignment_1_0)
	{ after(grammarAccess.getFrequencyAccess().getEveryAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Frequency__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Frequency__Group_1__1__Impl
	rule__Frequency__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Frequency__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFrequencyAccess().getAmountOfBeatsAssignment_1_1()); }
	(rule__Frequency__AmountOfBeatsAssignment_1_1)
	{ after(grammarAccess.getFrequencyAccess().getAmountOfBeatsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Frequency__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Frequency__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Frequency__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFrequencyAccess().getBeatsKeyword_1_2()); }
	'beats'
	{ after(grammarAccess.getFrequencyAccess().getBeatsKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__REAL__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__0__Impl
	rule__REAL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getINTTerminalRuleCall_0()); }
	(RULE_INT)?
	{ after(grammarAccess.getREALAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__1__Impl
	rule__REAL__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getREALAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
	{ after(grammarAccess.getREALAccess().getINTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__KeyAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getKeyKEYTerminalRuleCall_0_0()); }
		RULE_KEY
		{ after(grammarAccess.getModelAccess().getKeyKEYTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ScaleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getScaleScaleParserRuleCall_1_0()); }
		ruleScale
		{ after(grammarAccess.getModelAccess().getScaleScaleParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__BpmAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getBpmINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getModelAccess().getBpmINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__IsRandomisedAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getIsRandomisedRandomiseKeyword_3_0()); }
		(
			{ before(grammarAccess.getModelAccess().getIsRandomisedRandomiseKeyword_3_0()); }
			'randomise'
			{ after(grammarAccess.getModelAccess().getIsRandomisedRandomiseKeyword_3_0()); }
		)
		{ after(grammarAccess.getModelAccess().getIsRandomisedRandomiseKeyword_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__SectionsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getSectionsSectionParserRuleCall_4_0()); }
		ruleSection
		{ after(grammarAccess.getModelAccess().getSectionsSectionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__CallsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getCallsSectionCrossReference_5_0()); }
		(
			{ before(grammarAccess.getModelAccess().getCallsSectionIDTerminalRuleCall_5_0_1()); }
			RULE_ID
			{ after(grammarAccess.getModelAccess().getCallsSectionIDTerminalRuleCall_5_0_1()); }
		)
		{ after(grammarAccess.getModelAccess().getCallsSectionCrossReference_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSectionAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getSectionAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__DurationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSectionAccess().getDurationDurationParserRuleCall_1_0()); }
		ruleDuration
		{ after(grammarAccess.getSectionAccess().getDurationDurationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__CommandsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSectionAccess().getCommandsCommandParserRuleCall_3_0()); }
		ruleCommand
		{ after(grammarAccess.getSectionAccess().getCommandsCommandParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionCommand__ActionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionCommandAccess().getActionActionParserRuleCall_0_0()); }
		ruleAction
		{ after(grammarAccess.getActionCommandAccess().getActionActionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionCommand__SoundAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionCommandAccess().getSoundSoundLiteralParserRuleCall_1_0()); }
		ruleSoundLiteral
		{ after(grammarAccess.getActionCommandAccess().getSoundSoundLiteralParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionCommand__FrequencyAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionCommandAccess().getFrequencyFrequencyParserRuleCall_2_0()); }
		ruleFrequency
		{ after(grammarAccess.getActionCommandAccess().getFrequencyFrequencyParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCommand__DurationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopCommandAccess().getDurationDurationParserRuleCall_1_0()); }
		ruleDuration
		{ after(grammarAccess.getLoopCommandAccess().getDurationDurationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCommand__CommandsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopCommandAccess().getCommandsActionCommandParserRuleCall_3_0()); }
		ruleActionCommand
		{ after(grammarAccess.getLoopCommandAccess().getCommandsActionCommandParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCommand__ContinueAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopCommandAccess().getContinueThenKeyword_4_0_0()); }
		(
			{ before(grammarAccess.getLoopCommandAccess().getContinueThenKeyword_4_0_0()); }
			'then'
			{ after(grammarAccess.getLoopCommandAccess().getContinueThenKeyword_4_0_0()); }
		)
		{ after(grammarAccess.getLoopCommandAccess().getContinueThenKeyword_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCommand__NextAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopCommandAccess().getNextCommandParserRuleCall_4_1_0()); }
		ruleCommand
		{ after(grammarAccess.getLoopCommandAccess().getNextCommandParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DrumSample__StyleAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDrumSampleAccess().getStyleIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getDrumSampleAccess().getStyleIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DrumSample__SampleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDrumSampleAccess().getSampleSampleParserRuleCall_1_0()); }
		ruleSample
		{ after(grammarAccess.getDrumSampleAccess().getSampleSampleParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DrumSample__CounterAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDrumSampleAccess().getCounterINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getDrumSampleAccess().getCounterINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Melody__AmountOfNotesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMelodyAccess().getAmountOfNotesINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getMelodyAccess().getAmountOfNotesINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Melody__IsMelodyAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMelodyAccess().getIsMelodyNoteKeyword_1_0()); }
		(
			{ before(grammarAccess.getMelodyAccess().getIsMelodyNoteKeyword_1_0()); }
			'note'
			{ after(grammarAccess.getMelodyAccess().getIsMelodyNoteKeyword_1_0()); }
		)
		{ after(grammarAccess.getMelodyAccess().getIsMelodyNoteKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Melody__StyleAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMelodyAccess().getStyleIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getMelodyAccess().getStyleIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Melody__PatternAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMelodyAccess().getPatternPatternParserRuleCall_3_0()); }
		rulePattern
		{ after(grammarAccess.getMelodyAccess().getPatternPatternParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Duration__AmountOfBarsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDurationAccess().getAmountOfBarsINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getDurationAccess().getAmountOfBarsINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Frequency__EachAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFrequencyAccess().getEachEachKeyword_0_0_0()); }
		(
			{ before(grammarAccess.getFrequencyAccess().getEachEachKeyword_0_0_0()); }
			'each'
			{ after(grammarAccess.getFrequencyAccess().getEachEachKeyword_0_0_0()); }
		)
		{ after(grammarAccess.getFrequencyAccess().getEachEachKeyword_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Frequency__AmountOfBeatsAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFrequencyAccess().getAmountOfBeatsVALParserRuleCall_0_1_0()); }
		ruleVAL
		{ after(grammarAccess.getFrequencyAccess().getAmountOfBeatsVALParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Frequency__EveryAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFrequencyAccess().getEveryEveryKeyword_1_0_0()); }
		(
			{ before(grammarAccess.getFrequencyAccess().getEveryEveryKeyword_1_0_0()); }
			'every'
			{ after(grammarAccess.getFrequencyAccess().getEveryEveryKeyword_1_0_0()); }
		)
		{ after(grammarAccess.getFrequencyAccess().getEveryEveryKeyword_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Frequency__AmountOfBeatsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFrequencyAccess().getAmountOfBeatsVALParserRuleCall_1_1_0()); }
		ruleVAL
		{ after(grammarAccess.getFrequencyAccess().getAmountOfBeatsVALParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_KEY : ('a'..'g'|'A'..'G') RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
