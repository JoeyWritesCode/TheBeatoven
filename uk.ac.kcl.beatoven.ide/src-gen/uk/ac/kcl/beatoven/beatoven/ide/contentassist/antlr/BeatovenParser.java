/*
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.beatoven.beatoven.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import uk.ac.kcl.beatoven.beatoven.ide.contentassist.antlr.internal.InternalBeatovenParser;
import uk.ac.kcl.beatoven.beatoven.services.BeatovenGrammarAccess;

public class BeatovenParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(BeatovenGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, BeatovenGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
			builder.put(grammarAccess.getSoundLiteralAccess().getAlternatives(), "rule__SoundLiteral__Alternatives");
			builder.put(grammarAccess.getSampleAccess().getAlternatives(), "rule__Sample__Alternatives");
			builder.put(grammarAccess.getPatternAccess().getAlternatives(), "rule__Pattern__Alternatives");
			builder.put(grammarAccess.getFrequencyAccess().getAlternatives(), "rule__Frequency__Alternatives");
			builder.put(grammarAccess.getScaleAccess().getAlternatives(), "rule__Scale__Alternatives");
			builder.put(grammarAccess.getVALAccess().getAlternatives(), "rule__VAL__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getSectionAccess().getGroup(), "rule__Section__Group__0");
			builder.put(grammarAccess.getActionCommandAccess().getGroup(), "rule__ActionCommand__Group__0");
			builder.put(grammarAccess.getLoopCommandAccess().getGroup(), "rule__LoopCommand__Group__0");
			builder.put(grammarAccess.getLoopCommandAccess().getGroup_4(), "rule__LoopCommand__Group_4__0");
			builder.put(grammarAccess.getDrumSampleAccess().getGroup(), "rule__DrumSample__Group__0");
			builder.put(grammarAccess.getMelodyAccess().getGroup(), "rule__Melody__Group__0");
			builder.put(grammarAccess.getDurationAccess().getGroup(), "rule__Duration__Group__0");
			builder.put(grammarAccess.getFrequencyAccess().getGroup_0(), "rule__Frequency__Group_0__0");
			builder.put(grammarAccess.getFrequencyAccess().getGroup_1(), "rule__Frequency__Group_1__0");
			builder.put(grammarAccess.getREALAccess().getGroup(), "rule__REAL__Group__0");
			builder.put(grammarAccess.getModelAccess().getKeyAssignment_0(), "rule__Model__KeyAssignment_0");
			builder.put(grammarAccess.getModelAccess().getScaleAssignment_1(), "rule__Model__ScaleAssignment_1");
			builder.put(grammarAccess.getModelAccess().getBpmAssignment_2(), "rule__Model__BpmAssignment_2");
			builder.put(grammarAccess.getModelAccess().getIsRandomisedAssignment_3(), "rule__Model__IsRandomisedAssignment_3");
			builder.put(grammarAccess.getModelAccess().getSectionsAssignment_4(), "rule__Model__SectionsAssignment_4");
			builder.put(grammarAccess.getModelAccess().getCallsAssignment_5(), "rule__Model__CallsAssignment_5");
			builder.put(grammarAccess.getSectionAccess().getNameAssignment_0(), "rule__Section__NameAssignment_0");
			builder.put(grammarAccess.getSectionAccess().getDurationAssignment_1(), "rule__Section__DurationAssignment_1");
			builder.put(grammarAccess.getSectionAccess().getCommandsAssignment_3(), "rule__Section__CommandsAssignment_3");
			builder.put(grammarAccess.getActionCommandAccess().getActionAssignment_0(), "rule__ActionCommand__ActionAssignment_0");
			builder.put(grammarAccess.getActionCommandAccess().getSoundAssignment_1(), "rule__ActionCommand__SoundAssignment_1");
			builder.put(grammarAccess.getActionCommandAccess().getFrequencyAssignment_2(), "rule__ActionCommand__FrequencyAssignment_2");
			builder.put(grammarAccess.getLoopCommandAccess().getDurationAssignment_1(), "rule__LoopCommand__DurationAssignment_1");
			builder.put(grammarAccess.getLoopCommandAccess().getCommandsAssignment_3(), "rule__LoopCommand__CommandsAssignment_3");
			builder.put(grammarAccess.getLoopCommandAccess().getContinueAssignment_4_0(), "rule__LoopCommand__ContinueAssignment_4_0");
			builder.put(grammarAccess.getLoopCommandAccess().getNextAssignment_4_1(), "rule__LoopCommand__NextAssignment_4_1");
			builder.put(grammarAccess.getDrumSampleAccess().getStyleAssignment_0(), "rule__DrumSample__StyleAssignment_0");
			builder.put(grammarAccess.getDrumSampleAccess().getSampleAssignment_1(), "rule__DrumSample__SampleAssignment_1");
			builder.put(grammarAccess.getDrumSampleAccess().getCounterAssignment_2(), "rule__DrumSample__CounterAssignment_2");
			builder.put(grammarAccess.getMelodyAccess().getAmountOfNotesAssignment_0(), "rule__Melody__AmountOfNotesAssignment_0");
			builder.put(grammarAccess.getMelodyAccess().getIsMelodyAssignment_1(), "rule__Melody__IsMelodyAssignment_1");
			builder.put(grammarAccess.getMelodyAccess().getStyleAssignment_2(), "rule__Melody__StyleAssignment_2");
			builder.put(grammarAccess.getMelodyAccess().getPatternAssignment_3(), "rule__Melody__PatternAssignment_3");
			builder.put(grammarAccess.getDurationAccess().getAmountOfBarsAssignment_1(), "rule__Duration__AmountOfBarsAssignment_1");
			builder.put(grammarAccess.getFrequencyAccess().getEachAssignment_0_0(), "rule__Frequency__EachAssignment_0_0");
			builder.put(grammarAccess.getFrequencyAccess().getAmountOfBeatsAssignment_0_1(), "rule__Frequency__AmountOfBeatsAssignment_0_1");
			builder.put(grammarAccess.getFrequencyAccess().getEveryAssignment_1_0(), "rule__Frequency__EveryAssignment_1_0");
			builder.put(grammarAccess.getFrequencyAccess().getAmountOfBeatsAssignment_1_1(), "rule__Frequency__AmountOfBeatsAssignment_1_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private BeatovenGrammarAccess grammarAccess;

	@Override
	protected InternalBeatovenParser createParser() {
		InternalBeatovenParser result = new InternalBeatovenParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BeatovenGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BeatovenGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
