/**
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.beatoven.beatoven.generator;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import uk.ac.kcl.beatoven.beatoven.beatoven.ActionCommand;
import uk.ac.kcl.beatoven.beatoven.beatoven.Command;
import uk.ac.kcl.beatoven.beatoven.beatoven.DrumSample;
import uk.ac.kcl.beatoven.beatoven.beatoven.Duration;
import uk.ac.kcl.beatoven.beatoven.beatoven.LoopCommand;
import uk.ac.kcl.beatoven.beatoven.beatoven.Melody;
import uk.ac.kcl.beatoven.beatoven.beatoven.Model;
import uk.ac.kcl.beatoven.beatoven.beatoven.Section;
import uk.ac.kcl.beatoven.beatoven.beatoven.SoundLiteral;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class BeatovenGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final Model model = ((Model) _head);
    fsa.generateFile(this.deriveTargetFileNameFor(model, resource), 
      this.doGenerate(model));
  }
  
  public String deriveTargetFileNameFor(final Model model, final Resource resource) {
    return resource.getURI().appendFileExtension("txt").lastSegment();
  }
  
  public int counter = 0;
  
  public String doGenerate(final Model m) {
    StringConcatenation _builder = new StringConcatenation();
    String _myFunctions = this.myFunctions();
    _builder.append(_myFunctions);
    _builder.newLineIfNotEmpty();
    _builder.append("all_drums = \"/Users/josephmccracken/Downloads/SonicDrums/\"");
    _builder.newLine();
    _builder.append("use_bpm ");
    int _bpm = m.getBpm();
    _builder.append(_bpm);
    _builder.newLineIfNotEmpty();
    _builder.append("key = :");
    String _key = m.getKey();
    _builder.append(_key);
    _builder.newLineIfNotEmpty();
    _builder.append("voice = :");
    String _scale = m.getScale();
    _builder.append(_scale);
    _builder.newLineIfNotEmpty();
    _builder.append("r = current_random_seed");
    _builder.newLine();
    {
      boolean _isIsRandomised = m.isIsRandomised();
      if (_isIsRandomised) {
        _builder.append("r = Time.now.to_i");
        _builder.newLine();
      }
    }
    _builder.append("use_random_seed r");
    _builder.newLine();
    {
      EList<Section> _sections = m.getSections();
      for(final Section section : _sections) {
        String _name = section.getName();
        _builder.append(_name);
        _builder.append("_length = ");
        int _amountOfBars = this.getAmountOfBars(section);
        _builder.append(_amountOfBars);
        _builder.append(" * 4");
        _builder.newLineIfNotEmpty();
        _builder.append("in_thread do");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("sync :");
        String _name_1 = section.getName();
        _builder.append(_name_1, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        String _generateSection = this.generateSection(section);
        _builder.append(_generateSection, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("end");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("in_thread do");
    _builder.newLine();
    {
      EList<Section> _calls = m.getCalls();
      for(final Section call : _calls) {
        _builder.append("\t");
        _builder.append("cue :");
        String _name_2 = call.getName();
        _builder.append(_name_2, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("sleep ");
        String _name_3 = call.getName();
        _builder.append(_name_3, "\t");
        _builder.append("_length");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("end");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String myFunctions() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("define :play_lofi_lead do |note|");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("use_synth :piano");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("with_fx :reverb, mix: 0.7, room: 0.9 do");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("with_fx :pitch_shift, pitch: 0.1 do");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("play note + 12, amp: 2");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("end");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("end");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("define :play_lofi_chord do |chord|");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("use_synth :sine");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("with_fx :reverb, mix: 0.75 do");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("with_fx :bitcrusher, sample_rate: 46000, bits: 10 do");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("play chord, amp: 3, duration: 0.5, release: 3.25, attack: 0.35");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("end");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("end");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("define :play_lofi_bass do |note|");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("use_synth :sine");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("with_fx :lpf, cutoff: 75 do");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("play note - 12, amp: 3");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("end");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("define :play_house_lead do |note|");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("use_synth :tb303");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("with_fx :mono do");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("play note, amp: 5");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("end");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("define :play_house_chord do |chord|");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("use_synth :prophet");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("play chord");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("define :play_house_bass do |note|");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("use_synth :tb303");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("with_fx :lpf, cutoff: 75 do");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("play note - 48, amp: 1");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("end");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("define :play_trap_lead do |note|");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("use_synth :pretty_bell");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("with_fx :reverb, mix: 0.75 do");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("play note + 12, amp: 2");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("end");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("define :play_trap_chord do |chord|");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("use_synth :dark_ambience");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("play chord, env_curve: 4, sustain: 3, release: 1, amp: 4");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("define :play_trap_bass do |note|");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("use_synth :subpulse");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("with_fx :lpf, cutoff: 75 do");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("play note - 48, amp: 1");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("end");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    return _builder.toString();
  }
  
  public int getAmountOfBars(final Section section) {
    int _xblockexpression = (int) 0;
    {
      Duration _duration = section.getDuration();
      final Duration duration = ((Duration) _duration);
      _xblockexpression = duration.getAmountOfBars();
    }
    return _xblockexpression;
  }
  
  public String generateSection(final Section section) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("section_length = ");
    int _amountOfBars = this.getAmountOfBars(section);
    _builder.append(_amountOfBars);
    _builder.newLineIfNotEmpty();
    {
      EList<Command> _commands = section.getCommands();
      for(final Command command : _commands) {
        String _generateCommand = this.generateCommand(command);
        _builder.append(_generateCommand);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String generateCommand(final Command command) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((command instanceof LoopCommand)) {
        String _generateLoopInstructions = this.generateLoopInstructions(((LoopCommand) command));
        _builder.append(_generateLoopInstructions);
        _builder.newLineIfNotEmpty();
        _builder.newLine();
      } else {
        final ActionCommand actionCommand = ((ActionCommand) command);
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        {
          boolean _isEach = actionCommand.getFrequency().isEach();
          if (_isEach) {
            _builder.append("sleep ");
            String _amountOfBeats = actionCommand.getFrequency().getAmountOfBeats();
            _builder.append(_amountOfBeats);
            _builder.append(" - 1");
            _builder.newLineIfNotEmpty();
            String _generateSoundPlayingInstruction = this.generateSoundPlayingInstruction(actionCommand.getSound());
            _builder.append(_generateSoundPlayingInstruction);
            _builder.newLineIfNotEmpty();
            _builder.append("sleep 4 - (");
            String _amountOfBeats_1 = actionCommand.getFrequency().getAmountOfBeats();
            _builder.append(_amountOfBeats_1);
            _builder.append(" - 1)");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("(4 / ");
            String _amountOfBeats_2 = actionCommand.getFrequency().getAmountOfBeats();
            _builder.append(_amountOfBeats_2);
            _builder.append(").times do");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            String _generateSoundPlayingInstruction_1 = this.generateSoundPlayingInstruction(actionCommand.getSound());
            _builder.append(_generateSoundPlayingInstruction_1, "    ");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            _builder.append("sleep ");
            String _amountOfBeats_3 = actionCommand.getFrequency().getAmountOfBeats();
            _builder.append(_amountOfBeats_3, "    ");
            _builder.newLineIfNotEmpty();
            _builder.append("end");
            _builder.newLine();
          }
        }
      }
    }
    return _builder.toString();
  }
  
  public String generateLoopInstructions(final LoopCommand loop) {
    String _xblockexpression = null;
    {
      String instructions = "";
      for (int i = 0; (i < loop.getCommands().size()); i++) {
        String _instructions = instructions;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("in_thread do");
        _builder.newLine();
        ActionCommand command = loop.getCommands().get(i);
        _builder.newLineIfNotEmpty();
        {
          if ((command instanceof LoopCommand)) {
            String _generateLoopInstructions = this.generateLoopInstructions(((LoopCommand) command));
            _builder.append(_generateLoopInstructions);
            _builder.newLineIfNotEmpty();
          } else {
            String _generateSound = this.generateSound(((ActionCommand) command).getSound());
            _builder.append(_generateSound);
            _builder.newLineIfNotEmpty();
            int _amountOfBars = loop.getDuration().getAmountOfBars();
            _builder.append(_amountOfBars);
            _builder.append(".times do");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            String _generateCommand = this.generateCommand(loop.getCommands().get(i));
            _builder.append(_generateCommand, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("end");
            _builder.newLine();
            {
              if (((i == (loop.getCommands().size() - 1)) && loop.isContinue())) {
                String _generateCommand_1 = this.generateCommand(loop.getNext());
                _builder.append(_generateCommand_1);
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append("end");
        _builder.newLine();
        instructions = (_instructions + _builder);
      }
      _xblockexpression = instructions;
    }
    return _xblockexpression;
  }
  
  public String generateSound(final SoundLiteral sound) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((sound instanceof Melody)) {
        _builder.append("melody_");
        _builder.append(this.counter);
        _builder.append(" = []");
        _builder.newLineIfNotEmpty();
        int _amountOfNotes = ((Melody)sound).getAmountOfNotes();
        _builder.append(_amountOfNotes);
        _builder.append(".times do");
        _builder.newLineIfNotEmpty();
        {
          String _pattern = ((Melody)sound).getPattern();
          boolean _equals = Objects.equal(_pattern, "chords");
          if (_equals) {
            _builder.append("melody_");
            _builder.append(this.counter);
            _builder.append(" = melody_");
            _builder.append(this.counter);
            _builder.append(" + [[:i, :ii, :iii, :iv, :v].choose]");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("melody_");
            _builder.append(this.counter);
            _builder.append(" = melody_");
            _builder.append(this.counter);
            _builder.append(" + [choose(scale(key, voice))]");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("end");
        _builder.newLine();
        _builder.append("i = 0");
        _builder.newLine();
      }
    }
    return _builder.toString();
  }
  
  public String generateSoundPlayingInstruction(final SoundLiteral sound) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((sound instanceof Melody)) {
        {
          String _pattern = ((Melody)sound).getPattern();
          boolean _equals = Objects.equal(_pattern, "chords");
          if (_equals) {
            _builder.append("play_");
            String _style = ((Melody)sound).getStyle();
            _builder.append(_style);
            _builder.append("_chord chord_degree melody_");
            int _plusPlus = this.counter++;
            _builder.append(_plusPlus);
            _builder.append(".ring[i], key, voice, [3, 4].choose");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("play_");
            String _style_1 = ((Melody)sound).getStyle();
            _builder.append(_style_1);
            _builder.append("_");
            String _pattern_1 = ((Melody)sound).getPattern();
            _builder.append(_pattern_1);
            _builder.append(" melody_");
            int _plusPlus_1 = this.counter++;
            _builder.append(_plusPlus_1);
            _builder.append(".ring[i]");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("i = (inc i)");
        _builder.newLine();
      } else {
        String _generateDrumPlayingInstruction = this.generateDrumPlayingInstruction(((DrumSample) sound));
        _builder.append(_generateDrumPlayingInstruction);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String generateDrumPlayingInstruction(final DrumSample drum) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("sample all_drums+\"");
    String _style = drum.getStyle();
    _builder.append(_style);
    _builder.append("/");
    String _sample = drum.getSample();
    _builder.append(_sample);
    _builder.append("s\", ");
    int _counter = drum.getCounter();
    _builder.append(_counter);
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
}
