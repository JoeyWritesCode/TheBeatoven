/**
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.beatoven.beatoven.scoping;

import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import uk.ac.kcl.beatoven.beatoven.beatoven.Model;
import uk.ac.kcl.beatoven.beatoven.beatoven.Section;
import uk.ac.kcl.beatoven.beatoven.beatoven.SoundLiteral;

/**
 * This class contains custom scoping description.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class BeatovenScopeProvider extends AbstractDeclarativeScopeProvider {
  public IScope scope_SoundLiteral_var(final SoundLiteral context, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final Section section = EcoreUtil2.<Section>getContainerOfType(context, Section.class);
      final Model model = EcoreUtil2.<Model>getContainerOfType(section, Model.class);
      final Function1<Section, Boolean> _function = (Section s) -> {
        int _indexOf = model.getSections().indexOf(s);
        int _indexOf_1 = model.getSections().indexOf(section);
        return Boolean.valueOf((_indexOf > _indexOf_1));
      };
      _xblockexpression = Scopes.scopeFor(IterableExtensions.<Section>reject(model.getSections(), _function));
    }
    return _xblockexpression;
  }
}
