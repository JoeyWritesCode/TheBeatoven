/**
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.beatoven.beatoven.validation;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.validation.Check;
import uk.ac.kcl.beatoven.beatoven.beatoven.BeatovenPackage;
import uk.ac.kcl.beatoven.beatoven.beatoven.Command;
import uk.ac.kcl.beatoven.beatoven.beatoven.DrumSample;
import uk.ac.kcl.beatoven.beatoven.beatoven.Duration;
import uk.ac.kcl.beatoven.beatoven.beatoven.LoopCommand;
import uk.ac.kcl.beatoven.beatoven.beatoven.Section;
import uk.ac.kcl.beatoven.beatoven.beatoven.SoundLiteral;
import uk.ac.kcl.beatoven.beatoven.typing.validation.BeatovenTypeSystemValidator;

/**
 * This class contains custom validation rules.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class BeatovenValidator extends BeatovenTypeSystemValidator {
  public static final String INVALID_SECTION_NAME = "uk.ac.kcl.beatoven.beatoven.INVALID_SECTION_NAME";
  
  @Check
  public void checkSectionStartsWithUppercaseCharacter(final Section section) {
    boolean _isUpperCase = Character.isUpperCase(section.getName().charAt(0));
    boolean _not = (!_isUpperCase);
    if (_not) {
      this.warning("A section name should start with an upper-case character", section, 
        BeatovenPackage.Literals.SECTION__NAME, 
        BeatovenValidator.INVALID_SECTION_NAME);
    }
  }
  
  public static final String INVALID_LOOP_DURATION = "uk.ac.kcl.beatoven.beatoven.INVALID_LOOP_DURATION";
  
  @Check
  public void checkLoopDurationsAreWithinSectionDuration(final Section section) {
    int i = 0;
    EList<Command> _commands = section.getCommands();
    for (final Command command : _commands) {
      if ((command instanceof LoopCommand)) {
        this.checkCommandsDuration(((LoopCommand) command), i, section.getDuration().getAmountOfBars());
      }
    }
  }
  
  private Object checkCommandsDuration(final LoopCommand command, final int timeSpent, final int maxTimeSpent) {
    Object _xblockexpression = null;
    {
      Duration _duration = command.getDuration();
      final Duration duration = ((Duration) _duration);
      int _amountOfBars = duration.getAmountOfBars();
      int _plus = (_amountOfBars + timeSpent);
      boolean _greaterThan = (_plus > maxTimeSpent);
      if (_greaterThan) {
        this.warning("This loop\'s duration is longer than the section\'s", command, 
          BeatovenPackage.Literals.LOOP_COMMAND__DURATION, 
          BeatovenValidator.INVALID_LOOP_DURATION);
      }
      Object _xifexpression = null;
      boolean _isContinue = command.isContinue();
      if (_isContinue) {
        Command _next = command.getNext();
        int _amountOfBars_1 = duration.getAmountOfBars();
        int _plus_1 = (_amountOfBars_1 + timeSpent);
        _xifexpression = this.checkCommandsDuration(((LoopCommand) _next), _plus_1, maxTimeSpent);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public static final String INVALID_DRUM_COUNTER = "uk.ac.kcl.beatoven.beatoven.INVALID_DRUM_COUNTER";
  
  @Check
  public void checkDrumCounterIsLessThanTen(final DrumSample sound) {
    int _counter = sound.getCounter();
    boolean _greaterThan = (_counter > 10);
    if (_greaterThan) {
      String _sample = sound.getSample();
      String _plus = ("There are 11 " + _sample);
      String _plus_1 = (_plus + "s to select from. Select an integer from 0 to 10");
      this.warning(_plus_1, sound, 
        BeatovenPackage.Literals.DRUM_SAMPLE__COUNTER, 
        BeatovenValidator.INVALID_LOOP_DURATION);
    }
  }
  
  public static final String INVALID_STYLE = "uk.ac.kcl.beatoven.beatoven.INVALID_STYLE";
  
  @Check
  public void checkStyleIsSupported(final SoundLiteral sound) {
    if ((((!Objects.equal(sound.getStyle(), "lofi")) && (!Objects.equal(sound.getStyle(), "trap"))) && (!Objects.equal(sound.getStyle(), "house")))) {
      String _style = sound.getStyle();
      String _plus = (_style + " is not a valid style. The available styles are lofi, trap, and house");
      this.warning(_plus, sound, 
        BeatovenPackage.Literals.SOUND_LITERAL__STYLE, 
        BeatovenValidator.INVALID_STYLE);
    }
  }
}
